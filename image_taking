import schedule
import time
from datetime import date
import board
from adafruit_lsm6ds.lsm6dsox import LSM6DSOX as LSM6DS
from adafruit_lis3mdl import LIS3MDL
from git import Repo
from picamera2 import Picamera2

#VARIABLES
THRESHOLD = 10      #Any desired value from the accelerometer
REPO_PATH = "/home/paCubeSat/PA2425-CubeSat"     #Your github repo path: ex. /home/pi/FlatSatChallenge
FOLDER_PATH = "images"   #Your image folder path in your GitHub repo: ex. /Images

#imu and camera initialization
i2c = board.I2C()
accel_gyro = LSM6DS(i2c)
mag = LIS3MDL(i2c)
picam2 = Picamera2()


def git_push():
    """
    This function is complete. Stages, commits, and pushes new images to your GitHub repo.
    """
    try:
        repo = Repo(REPO_PATH)
        origin = repo.remote('origin')
        print('added remote')
        origin.pull()
        print('pulled changes')
        repo.git.add(REPO_PATH +'/' + FOLDER_PATH)
        repo.index.commit('New Photo')
        print('made the commit')
        origin.push()
        print('pushed changes')
    except:
        print('Couldn\'t upload to git')


def img_gen(name):
    """
    This function is complete. Generates a new image name.

    Parameters:
        name (str): your name ex. MasonM
    """
    t = time.strftime("_%H%M%S")
    imgname = (f'{REPO_PATH}/{FOLDER_PATH}/{name}{t}.jpg')
    return imgname


def take_photo(curr_time):
    """
    This function is NOT complete. Takes a photo when the FlatSat is shaken.
    Replace psuedocode with your own code.
    """
    while time.time()-curr_time < 120:
        
        if True:
            print("taking in .1")
        
            #CHECKS IF READINGS ARE ABOVE THRESHOLD
                #PAUSE
                #name = ""     #First Name, Last Initial  ex. MasonM
                #TAKE PHOTO
                #PUSH PHOTO TO GITHUB
            
            #PAUSE
            today = date.today()
            formatted_date = today.strftime("%d/%m/%Y")
            picam2.start()
            time.sleep(.1)
            picam2.capture_file(img_gen("image+formatted_date"))
            time.sleep(3)
    git_push()


def main():
    take_photo()



schedule.every(90).minutes.do(main)

while True:
    schedule.run_pending()
    time.sleep(10)